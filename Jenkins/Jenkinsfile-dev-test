void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/noraabiakar/mslearn-mlops"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent {
        docker { 
	        image 'mcr.microsoft.com/azure-cli:latest' 
	        args "--user root --privileged"
	    }
    }
    stages {
        // stage('Install az ml extension') {
        //     steps {
        //         sh 'az extension add -n ml -y'
        //     }
        // }
        // stage('Checkout') {
        //     steps {
        //         checkout([$class: 'GitSCM', branches: [[name: '*/feature/test14']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/noraabiakar/mslearn-mlops.git']]])
        //         sh "ls -lart ./*"
        //     }
        // } 
        // stage('Azure login') {
        //     steps {
        //         withCredentials([string(credentialsId: 'sp-app-id', variable: 'app_id'), string(credentialsId: 'sp-tennant-id', variable: 'tennant_id'), string(credentialsId: 'sp-password', variable: 'password')]) {
        //             sh 'az login --service-principal -u $app_id -p $password --tenant $tennant_id'
        //         }
        //     }
        // }
        // stage('Train Azure ML job') {
        //     steps {
        //         sh 'az ml job create --file src/dev_job.yml --resource-group "AzureML-tutorial" --workspace-name "nabk-ml-ws"'
        //     }
        // }

        stage('Lint') {
            steps {
                sh 'python -m pip install flake8'
                sh 'flake8 src/model'
            }
        }
    }
    post {
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}
